// NTS CPU Adjustable Variables
#define d_NTSFVARS 1
#include "global.h"


void detect_nts_fvars_change (void);
void Adjust_NTS_Parameters (void);
void Display_NTS_LIMITS (void);

#define numntsvars 31

	int16 nts_fvars[numntsvars];
	
	int16 nts_fvars_deci[numntsvars] = {
		0,				// 0  Top Speed
		0,				// 1  UT Velocity Limit
		0,				// 2  UT1 Velocity Limit
		0,				// 3  UT2 Velocity Limit
		0,				// 4  UT3 Velocity Limit
		0,				// 5  UT4 Velocity Limit
		0,				// 6  UT5 Velocity Limit
		0,				// 7  UT6 Velocity Limit
		0,				// 8  DT Velocity Limit
		0,				// 9  DT1 Velocity Limit
		0,				// 10 DT2 Velocity Limit
		0,				// 11 DT3 Velocity Limit
		0,				// 12 DT4 Velocity Limit
		0,				// 13 DT5 Velocity Limit
		0,				// 14 DT6 Velocity Limit 
		0,				// 15 Can Baud Rate
		0,				// 16 Velocity Direction
		0,				// 17 Debug Mode
		0,				// 18 
		0,				// 19 
		0,				// 20 
		0,				// 21 
		0,				// 22 
		0,				// 23 
		0,				// 24 
		0,				// 25 
		0,				// 26 
		0,				// 27
		0, 				// 28
		0,				// 29
		0,				// 30
	};


	int16 nts_fvars_max[numntsvars] = {
		1600,			// 0  Top Speed
		1600,			// 1  UT Velocity Limit
		1600,			// 2  UT1 Velocity Limit
		1600,			// 3  UT2 Velocity Limit
		1600,			// 4  UT3 Velocity Limit
		1600,			// 5  UT4 Velocity Limit
		1600,			// 6  UT5 Velocity Limit
		1600,			// 7  UT6 Velocity Limit
		1600,			// 8  DT Velocity Limit
		1600,			// 9  DT1 Velocity Limit
		1600,			// 10 DT2 Velocity Limit
		1600,			// 11 DT3 Velocity Limit
		1600,			// 12 DT4 Velocity Limit
		1600,			// 13 DT5 Velocity Limit
		1600,			// 14 DT6 Velocity Limit
		1,				// 15 Can Baud Rate
		1,				// 16 Velocity Direction
		1,				// 17 Debug Mode
		0,				// 18 
		0,				// 19 
		0,				// 20 
		0,				// 21 
		0,				// 22 
		0,				// 23 
		0,				// 24 
		0,				// 25 
		0,				// 26 
		0,				// 27
		0, 				// 28
		0,				// 29
		0,				// 30
	};

	int16 nts_fvars_min[numntsvars] = {
		0,				// 0  Top Speed
		0,				// 1  UT Velocity Limit
		0,				// 2  UT1 Velocity Limit
		0,				// 3  UT2 Velocity Limit
		0,				// 4  UT3 Velocity Limit
		0,				// 5  UT4 Velocity Limit
		0,				// 6  UT5 Velocity Limit
		0,				// 7  UT6 Velocity Limit
		0,				// 8  DT Velocity Limit
		0,				// 9  DT1 Velocity Limit
		0,				// 10 DT2 Velocity Limit
		0,				// 11 DT3 Velocity Limit
		0,				// 12 DT4 Velocity Limit
		0,				// 13 DT5 Velocity Limit
		0,				// 14 DT6 Velocity Limit
		0,				// 15 Can Baud Rate
		0,				// 16 Velocity Direction
		0,				// 17 Debug Mode
		0,				// 18 
		0,				// 19 
		0,				// 20 
		0,				// 21 
		0,				// 22 
		0,				// 23 
		0,				// 24 
		0,				// 25 
		0,				// 26 
		0,				// 27
		0, 				// 28
		0,				// 29
		0,				// 30
	};

	int16 nts_fvars_default[numntsvars] = {
		350,			// 0  Top Speed
		350,			// 1  UT Velocity Limit
		450,			// 2  UT1 Velocity Limit
		550,			// 3  UT2 Velocity Limit
		650,			// 4  UT3 Velocity Limit
		750,			// 5  UT4 Velocity Limit
		850,			// 6  UT5 Velocity Limit
		950,			// 7  UT6 Velocity Limit
		350,			// 8  DT Velocity Limit
		450,			// 9  DT1 Velocity Limit
		550,			// 10 DT2 Velocity Limit
		650,			// 11 DT3 Velocity Limit
		750,			// 12 DT4 Velocity Limit
		850,			// 13 DT5 Velocity Limit
		950,			// 14 DT6 Velocity Limit
		0,				// 15 Can Baud Rate
		0,				// 16 Velocity Direction
		0,				// 17 Debug Mode
		0,				// 18 
		0,				// 19 
		0,				// 20 
		0,				// 21 
		0,				// 22 
		0,				// 23 
		0,				// 24 
		0,				// 25 
		0,				// 26 
		0,				// 27
		0, 				// 28
		0,				// 29
		0,				// 30
	};

extern const char NTS_fvars_Min_Max[numntsvars][25] ={
  "Min=0     Max=1600   fpm",	// 0  Top Speed
  "Min=0     Max=1600   fpm",   // 1  UT Velocity Limit
  "Min=0     Max=1600   fpm",	// 2  UT1 Velocity Limit
  "Min=0     Max=1600   fpm",	// 3  UT2 Velocity Limit
  "Min=0     Max=1600   fpm",	// 4  UT3 Velocity Limit
  "Min=0     Max=1600   fpm",	// 5  UT4 Velocity Limit
  "Min=0     Max=1600   fpm",	// 6  UT5 Velocity Limit
  "Min=0     Max=1600   fpm",	// 7  UT6 Velocity Limit
  "Min=0     Max=1600   fpm",   // 8  DT Velocity Limit
  "Min=0     Max=1600   fpm",   // 9  DT1 Velocity Limit
  "Min=0     Max=1600   fpm",   // 10 DT2 Velocity Limit
  "Min=0     Max=1600   fpm",   // 11 DT3 Velocity Limit
  "Min=0     Max=1600   fpm",	// 12 DT4 Velocity Limit
  "Min=0     Max=1600   fpm",	// 13 DT5 Velocity Limit
  "Min=0     Max=1600   fpm",	// 14 DT6 Velocity Limit
  "0=115.2K, 1=57.6K   Baud",	// 15 Can Baud Rate flag: 0=115.2K, 1=57.6K
  "  0=Normal,  1=Invert   ",	// 16 Velocity Direction
  "Min=0     Max=1     Mode",	// 17 Debug Mode
  "                        ",	// 18 
  "                        ",	// 19 
  "                        ",	// 20 
  "                        ",	// 21 
  "                        ",	// 22 
  "                        ",	// 23 
  "                        ",	// 24 
  "                        ",	// 25 
};

extern const char NTS_Field_Vars[numntsvars][25] = {
  "     Top Speed =        ",	// 0  Top Speed
  "   UT Velocity =        ",	// 1  UT Velocity Limit
  "  UT1 Velocity =        ",	// 2  UT1 Velocity Limit
  "  UT2 Velocity =        ",	// 3  UT2 Velocity Limit
  "  UT3 Velocity =        ",	// 4  UT3 Velocity Limit
  "  UT4 Velocity =        ",	// 5  UT4 Velocity Limit
  "  UT5 Velocity =        ",	// 6  UT5 Velocity Limit
  "  UT6 Velocity =        ",	// 7  UT6 Velocity Limit
  "   DT Velocity =        ",	// 8  DT Velocity Limit
  "  DT1 Velocity =        ",	// 9  DT1 Velocity Limit
  "  DT2 Velocity =        ",	// 10 DT2 Velocity Limit
  "  DT3 Velocity =        ",	// 11 DT3 Velocity Limit
  "  DT4 Velocity =        ",	// 12 DT4 Velocity Limit
  "  DT5 Velocity =        ",	// 13 DT5 Velocity Limit
  "  DT6 Velocity =        ",	// 14 DT6 Velocity Limit
  " Can Baud Rate =        ",	// 15 Can Baud Rate flag: 0=115.2K, 1=57.6K
  "  Velocity Dir =        ",	// 16 Velocity Direction
  "    Debug Mode =        ",   // 17 Debug Mode
  "                        ",	// 18 
  "                        ",	// 19 
  "                        ",	// 20 
  "                        ",	// 21 
  "                        ",	// 22 
  "                        ",	// 23 
  "                        ",	// 24 
  "                        ",	// 25 
};

extern const char Wait [25];


uint16 nts_last_var = 16; 

uint16 const nts_var_ix[numntsvars] = {
// Car Speed Profile Variables for traction - Car Motion
 0, // 0  Top Speed
 1, // 1  UT Velocity Limit
 8, // 2  DT Velocity Limit
 2, // 3  UT1 Velocity Limit
 9, // 4  DT1 Velocity Limit
 3, // 5  UT2 Velocity Limit
10, // 6  DT2 Velocity Limit
 4, // 7  UT3 Velocity Limit
11, // 8  DT3 Velocity Limit
 5, // 9  UT4 Velocity Limit
12, // 10 DT4 Velocity Limit
 6, // 11 UT5 Velocity Limit
13, // 12 DT5 Velocity Limit
 7, // 13 UT6 Velocity Limit
14, // 14 DT6 Velocity Limit
16, // 15 Can Baud Rate flag: 0=115.2K, 1=57.6K
15, // 16 Velocity Direction
17, // 17 Debuf Mode
18, // 18 
19, // 19 
20, // 20 
21, // 21 
22, // 22 
23, // 23 
24, // 24 
25,	// 25 
26, // 26 
27, // 27 
28, // 28 
29, // 29 
30  // 30 
};

#define nts_fvtop_speed 0
#define nts_debug_mode 17


void detect_nts_fvars_change (void)
{
	int16 i = 0;
	if (NTS_can.eep_req == 0)
	{
		for(i=0;i<=nts_last_var;i++)
		{
			if (nts_fvars[i] != NTS_can.eeprom[i])
			{
				NTS_can.eep_req = 1;			
			}
		}
	}
}

//****************************************************
// Adjust Safety Processor Field Variables
//****************************************************

void Adjust_NTS_Parameters (void)
{
	int16 i;
	
	if(LCD_Pointer == 3)		// first time through procedure
	{
	    LCD_Pointer = 4;
		NTS_can.eep_req = 1;			
		NTS_can.eep_rcvd = 0;
	    Up_Date_LCD = 1;
		timers[tnts_ui] = 0;		
	    LCD_Sub_Point = 0;
	    LCD_Dig_Point = 0;
	    for(i=0; i<=23; i++)
			LCD_Display[0][i] = LCD_Field_Variables[Menu_level - 1][i];

	}
	
	if ((NTS_can.eep_rcvd == 1) || (timers[tnts_ui] > 30))
	{			// Display and adjust drive parameters	if (NTS_can.eep_rcvd == 1)
	
		if ((timers[tnts_ui] > 30) && (NTS_can.eep_rcvd == 0))
		{
		    Up_Date_LCD = 1;
			NTS_can.eep_req = 1;
			timers[tnts_ui] = 0;
		}
	
 		if((rdLCDio(Lcd_ENTER) == 0) && (LCD_Enter_PB == 0))
  		{
  		    LCD_Enter_PB = 1;
  		    LCD_Sub_Point++;
  		    Up_Date_LCD = 1;
  		    if(LCD_Sub_Point > 1)	// save field new value entered
  		    {
  		    	if (LCD_Pointer >= 4)
  		    	{
					NTS_can.eep_req = 2;
					NTS_can.eep_rcvd = 0;
					timers[tnts_ui] = 0;
					NTS_eep_ix = nts_var_ix[LCD_Pointer-4];	
					NTS_eep_nmb = nts_fvars[nts_var_ix[LCD_Pointer-4]];	    
					wr_nts_fvar();
					LCD_Sub_Point = 0;
					LCD_Dig_Point = 0;
  		    	}
  		    }
  		}
  		if((rdLCDio(Lcd_MODE) == 0) && (LCD_Mode_PB == 0))
  		{
  		    LCD_Mode_PB = 1;  //
  		    if(LCD_Sub_Point == 0)	// Leave the field var procedure
  		    {
				LCD_Pointer = Menu_level + 2;
				Menu_level = 0;
				for(i=0; i<=23; i++)
				{
				    LCD_Display[0][i] = LCD_Main_Menu[2][i];
					LCD_Display[1][i] = LCD_Field_Variables[LCD_Pointer-3][i];
				}
				return;
  		    }
  		    else if(LCD_Sub_Point > 0)
  		    {
				Up_Date_LCD = 1;
				LCD_Dig_Point = set_adj_digit(nts_fvars_max[nts_var_ix[LCD_Pointer-4]],LCD_Dig_Point);			
  		    }
  		}
  		if((rdLCDio(Lcd_UP) == 0) && (LCD_UP_PB == 0))
  		{
  		    LCD_UP_PB = 1;  // incriment
  		    Up_Date_LCD = 1;
  		    if(LCD_Sub_Point == 0)
  		    {
				LCD_Pointer++;
				if (nts_fvars[nts_fvtop_speed] <= 1300)
				{
					if ((LCD_Pointer > 16) && (LCD_Pointer < 19))
						LCD_Pointer = 19;
				}
				if (nts_fvars[nts_fvtop_speed] <= 1100)
				{
					if ((LCD_Pointer > 14) && (LCD_Pointer < 19))
						LCD_Pointer = 19;
				}
				if (nts_fvars[nts_fvtop_speed] <= 900)
				{
					if ((LCD_Pointer > 12) && (LCD_Pointer < 19))
						LCD_Pointer = 19;
				}
				if (nts_fvars[nts_fvtop_speed] <= 700)
				{
					if ((LCD_Pointer > 10) && (LCD_Pointer < 19))
						LCD_Pointer = 19;
				}
				if (nts_fvars[nts_fvtop_speed] <= 500)
				{
					if ((LCD_Pointer > 8) && (LCD_Pointer < 19))
						LCD_Pointer = 19;
				}
				if (nts_fvars[nts_fvtop_speed] <= 250)
				{
					if ((LCD_Pointer > 6) && (LCD_Pointer < 19))
						LCD_Pointer = 19;
				}
				
				
				if(LCD_Pointer > (nts_last_var + 4))	  // Last fvars # + 4
				    LCD_Pointer = 4;
  		    }
  		    else	// increment fieldvar
				adjust_variable(&nts_fvars[nts_var_ix[LCD_Pointer-4]],
						nts_fvars_max[nts_var_ix[LCD_Pointer-4]],
						nts_fvars_min[nts_var_ix[LCD_Pointer-4]],1,LCD_Dig_Point);
  		}
  		if((rdLCDio(Lcd_DN) == 0) && (LCD_DN_PB == 0))
  		{
  		    LCD_DN_PB = 1;  // decriment
  		    Up_Date_LCD = 1;
  		    if(LCD_Sub_Point == 0)
  		    {
				LCD_Pointer--;
				if (nts_fvars[nts_fvtop_speed] <= 1300)
				{
					if ((LCD_Pointer > 16) && (LCD_Pointer < 19))
						LCD_Pointer = 16;
				}
				if (nts_fvars[nts_fvtop_speed] <= 1100)
				{
					if ((LCD_Pointer > 14) && (LCD_Pointer < 19))
						LCD_Pointer = 14;
				}
				if (nts_fvars[nts_fvtop_speed] <= 900)
				{
					if ((LCD_Pointer > 12) && (LCD_Pointer < 19))
						LCD_Pointer = 12;
				}
				if (nts_fvars[nts_fvtop_speed] <= 700)
				{
					if ((LCD_Pointer > 10) && (LCD_Pointer < 19))
						LCD_Pointer = 10;
				}
				if (nts_fvars[nts_fvtop_speed] <= 500)
				{
					if ((LCD_Pointer > 8) && (LCD_Pointer < 19))
						LCD_Pointer = 8;
				}
				if (nts_fvars[nts_fvtop_speed] <= 250)
				{
					if ((LCD_Pointer > 6) && (LCD_Pointer < 19))
						LCD_Pointer = 6;
				}
				
				if (LCD_Pointer < 4)
			    	LCD_Pointer = (int16)(nts_last_var + 4);	 // Last fvars #
  		    }
  		    else	// decrement fieldvar
				adjust_variable(&nts_fvars[nts_var_ix[LCD_Pointer-4]],
						nts_fvars_max[nts_var_ix[LCD_Pointer-4]],
						nts_fvars_min[nts_var_ix[LCD_Pointer-4]],0,LCD_Dig_Point);
  		}

  		if(Up_Date_LCD == 1)
  		{
   		    Up_Date_LCD = 0;
  		    for(i=0; i<=23; i++)
  		    {
				  if(LCD_Sub_Point > 0)
				      LCD_Display[0][i] = NTS_fvars_Min_Max[nts_var_ix[LCD_Pointer-4]][i];
				  else
				      LCD_Display[0][i] = LCD_Field_Variables[Menu_level-1][i];
				  
				  LCD_Display[1][i] = NTS_Field_Vars[nts_var_ix[LCD_Pointer-4]][i];
  		    }
			if(LCD_Sub_Point > 0)
				Display_Var_Label(Menu_level,LCD_Pointer-4,nts_fvars[nts_var_ix[LCD_Pointer-4]]);
			
			display_variable(1, 17, nts_fvars_deci[nts_var_ix[LCD_Pointer-4]], nts_fvars[nts_var_ix[LCD_Pointer-4]], 1);
  		}
  		flash_digit(LCD_Flash_TMP[1], 1,LCD_Dig_Loc,(LCD_Sub_Point > 0));
	}
	else
	{
 	    Up_Date_LCD = 1;
 		if((rdLCDio(Lcd_MODE) == 0) && (LCD_Mode_PB == 0))
  		{
  		    LCD_Mode_PB = 1;  //
			LCD_Pointer = Menu_level + 2;
			Menu_level = 0;
			for(i=0; i<=23; i++)
			{
			    LCD_Display[0][i] = LCD_Main_Menu[2][i];
				LCD_Display[1][i] = LCD_Field_Variables[LCD_Pointer-3][i];
			}
			return;
  		}
  		for(i=0; i<=23; i++)
  			LCD_Display[1][i] = Wait[i];
  			
	}
}



// NTS IO display  --- make an even number of lines all the time
extern const char NTS_IOS [8][25] = 
{
  "   UN=0    UT=0   UT1=0 ",
  "   DN=0    DT=0   DT1=0 ",
  "  UT2=0   UT3=0   UT4=0 ",
  "  DT2=0   DT3=0   DT4=0 ",
  "  UT5=0   UT6=0         ",
  "  DT5=0   DT6=0         ",
  "   UP=0  NTSD=0         ",
  "  DNR=0 NTSD1=0         ",
};



void Display_NTS_IO (void)
{

	int16 i;
	int16 zero_ix;
	
	if (LCD_Pointer == 8)
	{		// first time through
		LCD_Pointer++;
		NTS_can.io_req = 1;
		LCD_Sub_Point = 0;
		timers[tnts_ui] = 0;
  	    Up_Date_LCD = 1;
	}
	
	if (timers[tnts_ui] >= 3)		// request io status every 300 msec
	{
		NTS_can.io_req = 1;
		timers[tnts_ui] = 0;
	}
	
 	if((rdLCDio(Lcd_ENTER) == 0) && (LCD_Enter_PB == 0))
  	{
  	    LCD_Enter_PB = 1;
  	    Up_Date_LCD = 1;
  	}
  	if((rdLCDio(Lcd_MODE) == 0) && (LCD_Mode_PB == 0))
  	{
  	    LCD_Mode_PB = 1;  //
		LCD_Pointer = 8;
		Menu_level = 0;
		for(i=0; i<=23; i++)
		{
		    LCD_Display[0][i] = LCD_Main_Menu[4][i];
			LCD_Display[1][i] = LCD_Input_Output[LCD_Pointer-5][i];
		}
		return;
  	}
  	if((rdLCDio(Lcd_UP) == 0) && (LCD_UP_PB == 0))
  	{
  	    LCD_UP_PB = 1;  // incriment
  	    Up_Date_LCD = 1;
  	    LCD_Sub_Point++;
 		if (nts_fvars[nts_fvtop_speed] <= 1100)
		{
			if (LCD_Sub_Point == 2)
				LCD_Sub_Point = 3;
		}
 		if (nts_fvars[nts_fvtop_speed] <= 500)
		{
			if (LCD_Sub_Point == 1)
				LCD_Sub_Point = 3;
		}
		if(LCD_Sub_Point > 3)	  
			LCD_Sub_Point = 0;
  	}
  	if((rdLCDio(Lcd_DN) == 0) && (LCD_DN_PB == 0))
  	{
  	    LCD_DN_PB = 1;  // decriment
  	    Up_Date_LCD = 1;
  	    LCD_Sub_Point--;
 		if (nts_fvars[nts_fvtop_speed] <= 1100)
		{
			if (LCD_Sub_Point == 2)
				LCD_Sub_Point = 1;
		}
 		if (nts_fvars[nts_fvtop_speed] <= 500)
		{
			if (LCD_Sub_Point == 1)
				LCD_Sub_Point = 0;
		}
		if(LCD_Sub_Point < 0)
		    LCD_Sub_Point = 3;
  	}

	if (Up_Date_LCD == 1)
	{
		for(i=0; i<=23; i++)
		{
		    LCD_Display[0][i] = NTS_IOS[(LCD_Sub_Point * 2)][i];
			LCD_Display[1][i] = NTS_IOS[(LCD_Sub_Point * 2) +1][i];
		}
		zero_ix = 0;
		if ((LCD_Sub_Point == 0) && (nts_fvars[nts_fvtop_speed] <= 250))
			zero_ix = 15;
			
		if (LCD_Sub_Point == 1)
 		{
		
			if (nts_fvars[nts_fvtop_speed] <= 900)
 				zero_ix = 15;
			if (nts_fvars[nts_fvtop_speed] <= 700)
 				zero_ix = 7;
		}
		if ((LCD_Sub_Point == 2) && (nts_fvars[nts_fvtop_speed] <= 1300))
 				zero_ix = 7;
 		
		if (zero_ix > 0)
		{
			for(i=zero_ix; i<=23; i++)
			{
			    LCD_Display[0][i] = ' ';
				LCD_Display[1][i] = ' ';
			}
		}
		
	}

	if (LCD_Sub_Point == 0)
	{
		
		//	 "   UN=0    UT=0   UT1=0 ",
		//	 "   DN=0    DT=0   DT1=0 ",
		if ((NTS_can.ios[0] & 0x01) != 0)	// UN
			LCD_Display[0][6] = '1';
		else
			LCD_Display[0][6] = '0';
		
		if ((NTS_can.ios[0] & 0x02) != 0)	// UT
			LCD_Display[0][14] = '1';
		else
			LCD_Display[0][14] = '0';
		
		if ((NTS_can.ios[1] & 0x01) != 0)	// DN
			LCD_Display[1][6] = '1';
		else
			LCD_Display[1][6] = '0';
		
		if ((NTS_can.ios[1] & 0x02) != 0)	// DT
			LCD_Display[1][14] = '1';
		else
			LCD_Display[1][14] = '0';
		
 		if (nts_fvars[nts_fvtop_speed] > 250)
		{
			if ((NTS_can.ios[0] & 0x04) != 0)	// UT1
				LCD_Display[0][22] = '1';
			else
				LCD_Display[0][22] = '0';
		
			if ((NTS_can.ios[1] & 0x04) != 0)	// DT1
				LCD_Display[1][22] = '1';
			else
				LCD_Display[1][22] = '0';
		}
	}
	else if (LCD_Sub_Point == 1)
	{
		//  "  UT2=0   UT3=0   UT4=0 ",
		//  "  DT2=0   DT3=0   DT4=0 ",
		if ((NTS_can.ios[0] & 0x08) != 0)	// UT2
			LCD_Display[0][6] = '1';
		else
			LCD_Display[0][6] = '0';
		
		if ((NTS_can.ios[1] & 0x08) != 0)	// DT2
			LCD_Display[1][6] = '1';
		else
			LCD_Display[1][6] = '0';
		
 		if (nts_fvars[nts_fvtop_speed] > 700)
		{
			if ((NTS_can.ios[0] & 0x10) != 0)	// UT3
				LCD_Display[0][14] = '1';
			else
				LCD_Display[0][14] = '0';
			
			if ((NTS_can.ios[1] & 0x10) != 0)	// DT3
				LCD_Display[1][14] = '1';
			else
				LCD_Display[1][14] = '0';
		}
		
 		if (nts_fvars[nts_fvtop_speed] > 900)
		{
			if ((NTS_can.ios[0] & 0x20) != 0)	// UT4
				LCD_Display[0][22] = '1';
			else
				LCD_Display[0][22] = '0';
			
			if ((NTS_can.ios[1] & 0x20) != 0)	// DT4
				LCD_Display[1][22] = '1';
			else
				LCD_Display[1][22] = '0';
		}
		
	}
	else if (LCD_Sub_Point == 2)
	{
		
		//  "  UT5=0   UT6=0         ",
		//  "  DT5=0   DT6=0         ",
		if ((NTS_can.ios[0] & 0x40) != 0)	// UT5
			LCD_Display[0][6] = '1';
		else
			LCD_Display[0][6] = '0';
		
		if ((NTS_can.ios[1] & 0x40) != 0)	// DT5	
			LCD_Display[1][6] = '1';
		else
			LCD_Display[1][6] = '0';
		
 		if (nts_fvars[nts_fvtop_speed] > 1300)
		{
			if ((NTS_can.ios[0] & 0x80) != 0)	// UT6
				LCD_Display[0][14] = '1';
			else
				LCD_Display[0][14] = '0';
					
			if ((NTS_can.ios[1] & 0x80) != 0)	// DT6	
				LCD_Display[1][14] = '1';
			else
				LCD_Display[1][14] = '0';
		}
		
	}

	else if (LCD_Sub_Point == 3)
	{
		
		//  "   UP=0  NTSD=0         ",
		//  "  DNR=0 NTSD1=0         ",
		if ((NTS_can.ios[2] & 0x01) != 0)	// UP
			LCD_Display[0][6] = '1';
		else
			LCD_Display[0][6] = '0';
		
		if ((NTS_can.ios[2] & 0x04) != 0)	// NTSD1
			LCD_Display[0][14] = '1';
		else
			LCD_Display[0][14] = '0';
		
		if ((NTS_can.ios[2] & 0x02) != 0)	// DNR
			LCD_Display[1][6] = '1';
		else
			LCD_Display[1][6] = '0';
		
		if ((NTS_can.ios[2] & 0x08) != 0)	// NTSD2
			LCD_Display[1][14] = '1';
		else
			LCD_Display[1][14] = '0';
		
	}
}

